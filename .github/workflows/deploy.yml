name: Terraform-demo

on:

  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  TF_LOG: INFO
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.2.3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: "./demo"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      run: |
        echo $SSH_PUBLIC_KEY > demo-key.pub && terraform init
        terraform plan -var-file="dev.auto.tfvars" -out=demo-plan -no-color
    
    - name: Terraform Apply
      working-directory: "./demo"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      run: |
        terraform apply "demo-plan"

    # # Run a terraform plan
    # - name: Terraform Plan
    #   working-directory: "./demo"
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
    #     AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
    #   run: terraform plan -var-file="dev.auto.tfvars" -out=demo-plan -no-color
    
    # - name: Terraform Apply
    #   working-directory: "./demo"
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
    #     AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
    #     SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    #   run: terraform apply "demo-plan"

    # # Run a terraform plan for pull requests only
    # - name: Terraform Plan
    #   id: plan
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
    #     AWS_PROFILE: ${{ secrets.AWS_PROFILE }}
    #   if: github.event_name == 'pull_request'
    #   run: terraform plan -no-color
    
    # # Add a comment to pull requests with plan results
    # - name: add-plan-comment
    #   id: comment
    #   uses: actions/github-script@v3
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
    #       <details><summary>Show Plan</summary>
          
    #       \`\`\`${process.env.PLAN}\`\`\`
          
    #       </details>
          
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
    #       github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

      # On push to main, build or change infrastructure according to Terraform configuration files
    # - name: Change Directory
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: cd demo
    
    # - name: Copy SSH Key to directory
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: echo $SSH_PUBLIC_KEY > demo-key.pub
    

 
